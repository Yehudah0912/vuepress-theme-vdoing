(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{405:function(s,t,e){"use strict";e.r(t);var a=e(4),n=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",{attrs:{align:"center"}},[t("img",{staticStyle:{cursor:"zoom-in"},attrs:{src:"https://images.pexels.com/photos/16668306/pexels-photo-16668306.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",width:"500"}})]),s._v(" "),t("p",[s._v("vue项目打包时报错，JS stacktrace : Reached heap limit Allocation failed - JavaScript heap out of memory\n这是因为node打包时是有内存空间限制的，node能分配多少空间，默认是根据电脑内存占比来算的。在内存比较小的电脑里，默认分配给node的内存可能不足以支撑起项目运行或者打包。这时就需要手动配置node运行内存，确保项目进程运行时正常有足够的内存完成操作。")]),s._v(" "),t("p",[s._v("下面是配置方法：\n在vue 的 "),t("code",[s._v("package.json")]),s._v("文件里找到需要运行的命令加上"),t("code",[s._v('NODE_OPTIONS=\\"--max-old-space-size=4096\\"')]),s._v("即可。\n4096 = 1024 * 4 也就是分配4G内存")]),s._v(" "),t("p",[s._v("要在 "),t("code",[s._v("package.json")]),s._v(" 文件中设置增加 Node 内存的选项，可以在 "),t("code",[s._v("scripts")]),s._v(" 部分的打包命令中添加环境变量。")]),s._v(" "),t("p",[s._v("例如，假设您的打包命令是 "),t("code",[s._v('"build": "vite build"')]),s._v("，您可以将其修改为以下形式：")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"build"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"NODE_OPTIONS=\\"--max-old-space-size=4096\\" vite build"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("这样，当您运行 "),t("code",[s._v("npm run build")]),s._v(" 命令时，Node 的内存限制将增加到 4096MB。您可以根据需要调整此值。")]),s._v(" "),t("h2",{attrs:{id:"分配内存够用就好"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分配内存够用就好"}},[s._v("#")]),s._v(" 分配内存够用就好")]),s._v(" "),t("p",[s._v("分配更大的内存给Node并不一定意味着应用程序会更流畅。虽然增加堆内存大小可能有助于处理更大的数据量或复杂的任务，但它也会带来一些潜在的问题。")]),s._v(" "),t("p",[s._v("首先，分配更多的内存可能会导致更长的垃圾回收（GC）暂停时间。当Node的堆内存增加时，垃圾回收器需要更长的时间来清理内存并释放未使用的对象。这可能会导致应用程序在GC期间出现短暂的停顿，影响响应时间和流畅性。")]),s._v(" "),t("p",[s._v("其次，分配过多的内存可能会导致系统资源的浪费。如果应用程序实际上并不需要大量的内存来执行任务，那么分配更多的内存只会浪费系统资源，并且可能影响其他应用程序的性能。")]),s._v(" "),t("p",[s._v("因此，要确定适当的内存分配大小，需要根据应用程序的实际需求进行评估和测试。如果应用程序在当前分配的内存下运行良好，则没有必要分配更多的内存。如果应用程序因内存不足而出现性能问题或崩溃，则可以逐步增加内存分配，并进行性能测试和监测，以找到最佳的内存配置。")])])}),[],!1,null,null,null);t.default=n.exports}}]);